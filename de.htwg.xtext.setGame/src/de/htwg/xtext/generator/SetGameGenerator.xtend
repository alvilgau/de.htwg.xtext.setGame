/*
 * generated by Xtext 2.10.0
 */
package de.htwg.xtext.generator

import de.htwg.xtext.setGame.Element
import de.htwg.xtext.setGame.Model
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SetGameGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		for (model : resource.allContents.filter(Model).toIterable) {
			println(model)
			fsa.generateFile(model.name + ".java", compile(model))
		}
	}

	def compile(Model model) '''
		package «model.package»;
		
		«FOR imp : model.imports»
			import «imp»;
		«ENDFOR»
		
		public class «model.name» «compileImplements(model.implements)»{
			«compileElements(model.elements)»
		}
	'''

	def compileImplements(EList<String> interfaces) '''
		«IF !interfaces.empty»
			«FOR iface : interfaces BEFORE "implements " SEPARATOR ", " »«iface»«ENDFOR»
		«ENDIF»
	'''

	def compileElements(EList<Element> elements) '''
		«FOR element : elements»
			private «element.type.toString.toFirstUpper» «element.name»;
		«ENDFOR»
		
		«compileMethods(elements)»
	'''

	def compileMethods(EList<Element> elements) '''
		«FOR element : elements»
			public «element.type.toString.toFirstUpper» get«element.name.toFirstUpper»() {
				return this.«element.name»;
			}
			
			public void set«element.name.toFirstUpper»(«element.type.toString.toFirstUpper» «element.name») {
				this.«element.name» = «element.name»;
			}
			
		«ENDFOR»
	'''

}
